//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.1 版自动生成。
// 
#pragma warning disable 1591

namespace Extra.EDM.com.focussend.app {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FocusSendWebServiceSoap", Namespace="http://focussend.com/")]
    public partial class FocusSendWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback BatchSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback BatchSendWithAttachOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendOneOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendOneWithSenderOperationCompleted;
        
        private System.Threading.SendOrPostCallback BatchSendPersonalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReceiverActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllReceiverActionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllReceiverActionByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubscribersToGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCreditToSubUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserLeftCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserReportUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllReceiverActionByDescriptionAndTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllReceiverActionByDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportByDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLinkTimesByTaskOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FocusSendWebService() {
            this.Url = global::Extra.EDM.Properties.Settings.Default.Extra_EDM_com_focussend_app_FocusSendWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event BatchSendCompletedEventHandler BatchSendCompleted;
        
        /// <remarks/>
        public event BatchSendWithAttachCompletedEventHandler BatchSendWithAttachCompleted;
        
        /// <remarks/>
        public event SendGroupCompletedEventHandler SendGroupCompleted;
        
        /// <remarks/>
        public event SendOneCompletedEventHandler SendOneCompleted;
        
        /// <remarks/>
        public event SendOneWithSenderCompletedEventHandler SendOneWithSenderCompleted;
        
        /// <remarks/>
        public event BatchSendPersonalCompletedEventHandler BatchSendPersonalCompleted;
        
        /// <remarks/>
        public event GetReportByNameCompletedEventHandler GetReportByNameCompleted;
        
        /// <remarks/>
        public event GetReceiverActionCompletedEventHandler GetReceiverActionCompleted;
        
        /// <remarks/>
        public event GetAllReceiverActionCompletedEventHandler GetAllReceiverActionCompleted;
        
        /// <remarks/>
        public event GetAllReceiverActionByTypeCompletedEventHandler GetAllReceiverActionByTypeCompleted;
        
        /// <remarks/>
        public event AddSubscribersToGroupCompletedEventHandler AddSubscribersToGroupCompleted;
        
        /// <remarks/>
        public event AddSubUserCompletedEventHandler AddSubUserCompleted;
        
        /// <remarks/>
        public event AddCreditToSubUserCompletedEventHandler AddCreditToSubUserCompleted;
        
        /// <remarks/>
        public event GetUserLeftCreditCompletedEventHandler GetUserLeftCreditCompleted;
        
        /// <remarks/>
        public event GetUserReportUrlCompletedEventHandler GetUserReportUrlCompleted;
        
        /// <remarks/>
        public event UploadTemplateCompletedEventHandler UploadTemplateCompleted;
        
        /// <remarks/>
        public event GetAllReceiverActionByDescriptionAndTypeCompletedEventHandler GetAllReceiverActionByDescriptionAndTypeCompleted;
        
        /// <remarks/>
        public event GetAllReceiverActionByDescriptionCompletedEventHandler GetAllReceiverActionByDescriptionCompleted;
        
        /// <remarks/>
        public event GetReportByDescriptionCompletedEventHandler GetReportByDescriptionCompleted;
        
        /// <remarks/>
        public event GetLinkTimesByTaskCompletedEventHandler GetLinkTimesByTaskCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/HelloWorld", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/BatchSend", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BatchSend(FocusUser user, FocusEmail email, FocusTask task, FocusReceiver[] receivers) {
            object[] results = this.Invoke("BatchSend", new object[] {
                        user,
                        email,
                        task,
                        receivers});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BatchSendAsync(FocusUser user, FocusEmail email, FocusTask task, FocusReceiver[] receivers) {
            this.BatchSendAsync(user, email, task, receivers, null);
        }
        
        /// <remarks/>
        public void BatchSendAsync(FocusUser user, FocusEmail email, FocusTask task, FocusReceiver[] receivers, object userState) {
            if ((this.BatchSendOperationCompleted == null)) {
                this.BatchSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBatchSendOperationCompleted);
            }
            this.InvokeAsync("BatchSend", new object[] {
                        user,
                        email,
                        task,
                        receivers}, this.BatchSendOperationCompleted, userState);
        }
        
        private void OnBatchSendOperationCompleted(object arg) {
            if ((this.BatchSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BatchSendCompleted(this, new BatchSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/BatchSendWithAttach", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BatchSendWithAttach(FocusUser user, FocusEmail email, FocusTask task, FocusReceiver[] receivers, byte[][] attaches) {
            object[] results = this.Invoke("BatchSendWithAttach", new object[] {
                        user,
                        email,
                        task,
                        receivers,
                        attaches});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BatchSendWithAttachAsync(FocusUser user, FocusEmail email, FocusTask task, FocusReceiver[] receivers, byte[][] attaches) {
            this.BatchSendWithAttachAsync(user, email, task, receivers, attaches, null);
        }
        
        /// <remarks/>
        public void BatchSendWithAttachAsync(FocusUser user, FocusEmail email, FocusTask task, FocusReceiver[] receivers, byte[][] attaches, object userState) {
            if ((this.BatchSendWithAttachOperationCompleted == null)) {
                this.BatchSendWithAttachOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBatchSendWithAttachOperationCompleted);
            }
            this.InvokeAsync("BatchSendWithAttach", new object[] {
                        user,
                        email,
                        task,
                        receivers,
                        attaches}, this.BatchSendWithAttachOperationCompleted, userState);
        }
        
        private void OnBatchSendWithAttachOperationCompleted(object arg) {
            if ((this.BatchSendWithAttachCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BatchSendWithAttachCompleted(this, new BatchSendWithAttachCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/SendGroup", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendGroup(FocusUser user, FocusEmail email, FocusTask task, string groupName) {
            object[] results = this.Invoke("SendGroup", new object[] {
                        user,
                        email,
                        task,
                        groupName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendGroupAsync(FocusUser user, FocusEmail email, FocusTask task, string groupName) {
            this.SendGroupAsync(user, email, task, groupName, null);
        }
        
        /// <remarks/>
        public void SendGroupAsync(FocusUser user, FocusEmail email, FocusTask task, string groupName, object userState) {
            if ((this.SendGroupOperationCompleted == null)) {
                this.SendGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendGroupOperationCompleted);
            }
            this.InvokeAsync("SendGroup", new object[] {
                        user,
                        email,
                        task,
                        groupName}, this.SendGroupOperationCompleted, userState);
        }
        
        private void OnSendGroupOperationCompleted(object arg) {
            if ((this.SendGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendGroupCompleted(this, new SendGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/SendOne", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendOne(FocusUser user, FocusEmail email, string subject, FocusReceiver receiver) {
            object[] results = this.Invoke("SendOne", new object[] {
                        user,
                        email,
                        subject,
                        receiver});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendOneAsync(FocusUser user, FocusEmail email, string subject, FocusReceiver receiver) {
            this.SendOneAsync(user, email, subject, receiver, null);
        }
        
        /// <remarks/>
        public void SendOneAsync(FocusUser user, FocusEmail email, string subject, FocusReceiver receiver, object userState) {
            if ((this.SendOneOperationCompleted == null)) {
                this.SendOneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendOneOperationCompleted);
            }
            this.InvokeAsync("SendOne", new object[] {
                        user,
                        email,
                        subject,
                        receiver}, this.SendOneOperationCompleted, userState);
        }
        
        private void OnSendOneOperationCompleted(object arg) {
            if ((this.SendOneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendOneCompleted(this, new SendOneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/SendOneWithSender", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendOneWithSender(FocusUser user, FocusEmail email, string subject, FocusReceiver receiver, string senderName, string senderEmail) {
            object[] results = this.Invoke("SendOneWithSender", new object[] {
                        user,
                        email,
                        subject,
                        receiver,
                        senderName,
                        senderEmail});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendOneWithSenderAsync(FocusUser user, FocusEmail email, string subject, FocusReceiver receiver, string senderName, string senderEmail) {
            this.SendOneWithSenderAsync(user, email, subject, receiver, senderName, senderEmail, null);
        }
        
        /// <remarks/>
        public void SendOneWithSenderAsync(FocusUser user, FocusEmail email, string subject, FocusReceiver receiver, string senderName, string senderEmail, object userState) {
            if ((this.SendOneWithSenderOperationCompleted == null)) {
                this.SendOneWithSenderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendOneWithSenderOperationCompleted);
            }
            this.InvokeAsync("SendOneWithSender", new object[] {
                        user,
                        email,
                        subject,
                        receiver,
                        senderName,
                        senderEmail}, this.SendOneWithSenderOperationCompleted, userState);
        }
        
        private void OnSendOneWithSenderOperationCompleted(object arg) {
            if ((this.SendOneWithSenderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendOneWithSenderCompleted(this, new SendOneWithSenderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/BatchSendPersonal", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BatchSendPersonal(FocusUser user, FocusTask task, FocusEmail[] emails, FocusReceiver[] receivers) {
            object[] results = this.Invoke("BatchSendPersonal", new object[] {
                        user,
                        task,
                        emails,
                        receivers});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BatchSendPersonalAsync(FocusUser user, FocusTask task, FocusEmail[] emails, FocusReceiver[] receivers) {
            this.BatchSendPersonalAsync(user, task, emails, receivers, null);
        }
        
        /// <remarks/>
        public void BatchSendPersonalAsync(FocusUser user, FocusTask task, FocusEmail[] emails, FocusReceiver[] receivers, object userState) {
            if ((this.BatchSendPersonalOperationCompleted == null)) {
                this.BatchSendPersonalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBatchSendPersonalOperationCompleted);
            }
            this.InvokeAsync("BatchSendPersonal", new object[] {
                        user,
                        task,
                        emails,
                        receivers}, this.BatchSendPersonalOperationCompleted, userState);
        }
        
        private void OnBatchSendPersonalOperationCompleted(object arg) {
            if ((this.BatchSendPersonalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BatchSendPersonalCompleted(this, new BatchSendPersonalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/GetReportByName", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FocusReport GetReportByName(FocusUser user, string taskName) {
            object[] results = this.Invoke("GetReportByName", new object[] {
                        user,
                        taskName});
            return ((FocusReport)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportByNameAsync(FocusUser user, string taskName) {
            this.GetReportByNameAsync(user, taskName, null);
        }
        
        /// <remarks/>
        public void GetReportByNameAsync(FocusUser user, string taskName, object userState) {
            if ((this.GetReportByNameOperationCompleted == null)) {
                this.GetReportByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportByNameOperationCompleted);
            }
            this.InvokeAsync("GetReportByName", new object[] {
                        user,
                        taskName}, this.GetReportByNameOperationCompleted, userState);
        }
        
        private void OnGetReportByNameOperationCompleted(object arg) {
            if ((this.GetReportByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportByNameCompleted(this, new GetReportByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/GetReceiverAction", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FocusReceiverAction GetReceiverAction(FocusUser user, string taskName, string email) {
            object[] results = this.Invoke("GetReceiverAction", new object[] {
                        user,
                        taskName,
                        email});
            return ((FocusReceiverAction)(results[0]));
        }
        
        /// <remarks/>
        public void GetReceiverActionAsync(FocusUser user, string taskName, string email) {
            this.GetReceiverActionAsync(user, taskName, email, null);
        }
        
        /// <remarks/>
        public void GetReceiverActionAsync(FocusUser user, string taskName, string email, object userState) {
            if ((this.GetReceiverActionOperationCompleted == null)) {
                this.GetReceiverActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReceiverActionOperationCompleted);
            }
            this.InvokeAsync("GetReceiverAction", new object[] {
                        user,
                        taskName,
                        email}, this.GetReceiverActionOperationCompleted, userState);
        }
        
        private void OnGetReceiverActionOperationCompleted(object arg) {
            if ((this.GetReceiverActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReceiverActionCompleted(this, new GetReceiverActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/GetAllReceiverAction", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FocusReceiverAction[] GetAllReceiverAction(FocusUser user, string taskName, int startIndex, int endIndex) {
            object[] results = this.Invoke("GetAllReceiverAction", new object[] {
                        user,
                        taskName,
                        startIndex,
                        endIndex});
            return ((FocusReceiverAction[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllReceiverActionAsync(FocusUser user, string taskName, int startIndex, int endIndex) {
            this.GetAllReceiverActionAsync(user, taskName, startIndex, endIndex, null);
        }
        
        /// <remarks/>
        public void GetAllReceiverActionAsync(FocusUser user, string taskName, int startIndex, int endIndex, object userState) {
            if ((this.GetAllReceiverActionOperationCompleted == null)) {
                this.GetAllReceiverActionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllReceiverActionOperationCompleted);
            }
            this.InvokeAsync("GetAllReceiverAction", new object[] {
                        user,
                        taskName,
                        startIndex,
                        endIndex}, this.GetAllReceiverActionOperationCompleted, userState);
        }
        
        private void OnGetAllReceiverActionOperationCompleted(object arg) {
            if ((this.GetAllReceiverActionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllReceiverActionCompleted(this, new GetAllReceiverActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/GetAllReceiverActionByType", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FocusReceiverAction[] GetAllReceiverActionByType(FocusUser user, FocusReportType type, string taskName, int startIndex, int endIndex) {
            object[] results = this.Invoke("GetAllReceiverActionByType", new object[] {
                        user,
                        type,
                        taskName,
                        startIndex,
                        endIndex});
            return ((FocusReceiverAction[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllReceiverActionByTypeAsync(FocusUser user, FocusReportType type, string taskName, int startIndex, int endIndex) {
            this.GetAllReceiverActionByTypeAsync(user, type, taskName, startIndex, endIndex, null);
        }
        
        /// <remarks/>
        public void GetAllReceiverActionByTypeAsync(FocusUser user, FocusReportType type, string taskName, int startIndex, int endIndex, object userState) {
            if ((this.GetAllReceiverActionByTypeOperationCompleted == null)) {
                this.GetAllReceiverActionByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllReceiverActionByTypeOperationCompleted);
            }
            this.InvokeAsync("GetAllReceiverActionByType", new object[] {
                        user,
                        type,
                        taskName,
                        startIndex,
                        endIndex}, this.GetAllReceiverActionByTypeOperationCompleted, userState);
        }
        
        private void OnGetAllReceiverActionByTypeOperationCompleted(object arg) {
            if ((this.GetAllReceiverActionByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllReceiverActionByTypeCompleted(this, new GetAllReceiverActionByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/AddSubscribersToGroup", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddSubscribersToGroup(FocusUser user, string groupName, FocusReceiver[] receivers) {
            object[] results = this.Invoke("AddSubscribersToGroup", new object[] {
                        user,
                        groupName,
                        receivers});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddSubscribersToGroupAsync(FocusUser user, string groupName, FocusReceiver[] receivers) {
            this.AddSubscribersToGroupAsync(user, groupName, receivers, null);
        }
        
        /// <remarks/>
        public void AddSubscribersToGroupAsync(FocusUser user, string groupName, FocusReceiver[] receivers, object userState) {
            if ((this.AddSubscribersToGroupOperationCompleted == null)) {
                this.AddSubscribersToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubscribersToGroupOperationCompleted);
            }
            this.InvokeAsync("AddSubscribersToGroup", new object[] {
                        user,
                        groupName,
                        receivers}, this.AddSubscribersToGroupOperationCompleted, userState);
        }
        
        private void OnAddSubscribersToGroupOperationCompleted(object arg) {
            if ((this.AddSubscribersToGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubscribersToGroupCompleted(this, new AddSubscribersToGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/AddSubUser", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FocusResult AddSubUser(FocusUser adminUser, FocusUser subUser) {
            object[] results = this.Invoke("AddSubUser", new object[] {
                        adminUser,
                        subUser});
            return ((FocusResult)(results[0]));
        }
        
        /// <remarks/>
        public void AddSubUserAsync(FocusUser adminUser, FocusUser subUser) {
            this.AddSubUserAsync(adminUser, subUser, null);
        }
        
        /// <remarks/>
        public void AddSubUserAsync(FocusUser adminUser, FocusUser subUser, object userState) {
            if ((this.AddSubUserOperationCompleted == null)) {
                this.AddSubUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubUserOperationCompleted);
            }
            this.InvokeAsync("AddSubUser", new object[] {
                        adminUser,
                        subUser}, this.AddSubUserOperationCompleted, userState);
        }
        
        private void OnAddSubUserOperationCompleted(object arg) {
            if ((this.AddSubUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubUserCompleted(this, new AddSubUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/AddCreditToSubUser", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FocusResult AddCreditToSubUser(FocusUser adminUser, int credit, FocusUser subUser) {
            object[] results = this.Invoke("AddCreditToSubUser", new object[] {
                        adminUser,
                        credit,
                        subUser});
            return ((FocusResult)(results[0]));
        }
        
        /// <remarks/>
        public void AddCreditToSubUserAsync(FocusUser adminUser, int credit, FocusUser subUser) {
            this.AddCreditToSubUserAsync(adminUser, credit, subUser, null);
        }
        
        /// <remarks/>
        public void AddCreditToSubUserAsync(FocusUser adminUser, int credit, FocusUser subUser, object userState) {
            if ((this.AddCreditToSubUserOperationCompleted == null)) {
                this.AddCreditToSubUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCreditToSubUserOperationCompleted);
            }
            this.InvokeAsync("AddCreditToSubUser", new object[] {
                        adminUser,
                        credit,
                        subUser}, this.AddCreditToSubUserOperationCompleted, userState);
        }
        
        private void OnAddCreditToSubUserOperationCompleted(object arg) {
            if ((this.AddCreditToSubUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCreditToSubUserCompleted(this, new AddCreditToSubUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/GetUserLeftCredit", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUserLeftCredit(FocusUser user) {
            object[] results = this.Invoke("GetUserLeftCredit", new object[] {
                        user});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserLeftCreditAsync(FocusUser user) {
            this.GetUserLeftCreditAsync(user, null);
        }
        
        /// <remarks/>
        public void GetUserLeftCreditAsync(FocusUser user, object userState) {
            if ((this.GetUserLeftCreditOperationCompleted == null)) {
                this.GetUserLeftCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserLeftCreditOperationCompleted);
            }
            this.InvokeAsync("GetUserLeftCredit", new object[] {
                        user}, this.GetUserLeftCreditOperationCompleted, userState);
        }
        
        private void OnGetUserLeftCreditOperationCompleted(object arg) {
            if ((this.GetUserLeftCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserLeftCreditCompleted(this, new GetUserLeftCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/GetUserReportUrl", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserReportUrl(FocusUser user, string taskName) {
            object[] results = this.Invoke("GetUserReportUrl", new object[] {
                        user,
                        taskName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserReportUrlAsync(FocusUser user, string taskName) {
            this.GetUserReportUrlAsync(user, taskName, null);
        }
        
        /// <remarks/>
        public void GetUserReportUrlAsync(FocusUser user, string taskName, object userState) {
            if ((this.GetUserReportUrlOperationCompleted == null)) {
                this.GetUserReportUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserReportUrlOperationCompleted);
            }
            this.InvokeAsync("GetUserReportUrl", new object[] {
                        user,
                        taskName}, this.GetUserReportUrlOperationCompleted, userState);
        }
        
        private void OnGetUserReportUrlOperationCompleted(object arg) {
            if ((this.GetUserReportUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserReportUrlCompleted(this, new GetUserReportUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/UploadTemplate", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadTemplate(FocusUser user, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] zipFile, string templateName) {
            object[] results = this.Invoke("UploadTemplate", new object[] {
                        user,
                        zipFile,
                        templateName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadTemplateAsync(FocusUser user, byte[] zipFile, string templateName) {
            this.UploadTemplateAsync(user, zipFile, templateName, null);
        }
        
        /// <remarks/>
        public void UploadTemplateAsync(FocusUser user, byte[] zipFile, string templateName, object userState) {
            if ((this.UploadTemplateOperationCompleted == null)) {
                this.UploadTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTemplateOperationCompleted);
            }
            this.InvokeAsync("UploadTemplate", new object[] {
                        user,
                        zipFile,
                        templateName}, this.UploadTemplateOperationCompleted, userState);
        }
        
        private void OnUploadTemplateOperationCompleted(object arg) {
            if ((this.UploadTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadTemplateCompleted(this, new UploadTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/GetAllReceiverActionByDescriptionAndType", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FocusReceiverAction[] GetAllReceiverActionByDescriptionAndType(FocusUser user, string description, int startIndex, int endIndex, FocusReportType type) {
            object[] results = this.Invoke("GetAllReceiverActionByDescriptionAndType", new object[] {
                        user,
                        description,
                        startIndex,
                        endIndex,
                        type});
            return ((FocusReceiverAction[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllReceiverActionByDescriptionAndTypeAsync(FocusUser user, string description, int startIndex, int endIndex, FocusReportType type) {
            this.GetAllReceiverActionByDescriptionAndTypeAsync(user, description, startIndex, endIndex, type, null);
        }
        
        /// <remarks/>
        public void GetAllReceiverActionByDescriptionAndTypeAsync(FocusUser user, string description, int startIndex, int endIndex, FocusReportType type, object userState) {
            if ((this.GetAllReceiverActionByDescriptionAndTypeOperationCompleted == null)) {
                this.GetAllReceiverActionByDescriptionAndTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllReceiverActionByDescriptionAndTypeOperationCompleted);
            }
            this.InvokeAsync("GetAllReceiverActionByDescriptionAndType", new object[] {
                        user,
                        description,
                        startIndex,
                        endIndex,
                        type}, this.GetAllReceiverActionByDescriptionAndTypeOperationCompleted, userState);
        }
        
        private void OnGetAllReceiverActionByDescriptionAndTypeOperationCompleted(object arg) {
            if ((this.GetAllReceiverActionByDescriptionAndTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllReceiverActionByDescriptionAndTypeCompleted(this, new GetAllReceiverActionByDescriptionAndTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/GetAllReceiverActionByDescription", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FocusReceiverAction[] GetAllReceiverActionByDescription(FocusUser user, string description, int startIndex, int endIndex) {
            object[] results = this.Invoke("GetAllReceiverActionByDescription", new object[] {
                        user,
                        description,
                        startIndex,
                        endIndex});
            return ((FocusReceiverAction[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllReceiverActionByDescriptionAsync(FocusUser user, string description, int startIndex, int endIndex) {
            this.GetAllReceiverActionByDescriptionAsync(user, description, startIndex, endIndex, null);
        }
        
        /// <remarks/>
        public void GetAllReceiverActionByDescriptionAsync(FocusUser user, string description, int startIndex, int endIndex, object userState) {
            if ((this.GetAllReceiverActionByDescriptionOperationCompleted == null)) {
                this.GetAllReceiverActionByDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllReceiverActionByDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetAllReceiverActionByDescription", new object[] {
                        user,
                        description,
                        startIndex,
                        endIndex}, this.GetAllReceiverActionByDescriptionOperationCompleted, userState);
        }
        
        private void OnGetAllReceiverActionByDescriptionOperationCompleted(object arg) {
            if ((this.GetAllReceiverActionByDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllReceiverActionByDescriptionCompleted(this, new GetAllReceiverActionByDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/GetReportByDescription", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FocusReport GetReportByDescription(FocusUser user, string description) {
            object[] results = this.Invoke("GetReportByDescription", new object[] {
                        user,
                        description});
            return ((FocusReport)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportByDescriptionAsync(FocusUser user, string description) {
            this.GetReportByDescriptionAsync(user, description, null);
        }
        
        /// <remarks/>
        public void GetReportByDescriptionAsync(FocusUser user, string description, object userState) {
            if ((this.GetReportByDescriptionOperationCompleted == null)) {
                this.GetReportByDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportByDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetReportByDescription", new object[] {
                        user,
                        description}, this.GetReportByDescriptionOperationCompleted, userState);
        }
        
        private void OnGetReportByDescriptionOperationCompleted(object arg) {
            if ((this.GetReportByDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportByDescriptionCompleted(this, new GetReportByDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://focussend.com/GetLinkTimesByTask", RequestNamespace="http://focussend.com/", ResponseNamespace="http://focussend.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FocusLink[] GetLinkTimesByTask(FocusUser user, string taskName) {
            object[] results = this.Invoke("GetLinkTimesByTask", new object[] {
                        user,
                        taskName});
            return ((FocusLink[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLinkTimesByTaskAsync(FocusUser user, string taskName) {
            this.GetLinkTimesByTaskAsync(user, taskName, null);
        }
        
        /// <remarks/>
        public void GetLinkTimesByTaskAsync(FocusUser user, string taskName, object userState) {
            if ((this.GetLinkTimesByTaskOperationCompleted == null)) {
                this.GetLinkTimesByTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLinkTimesByTaskOperationCompleted);
            }
            this.InvokeAsync("GetLinkTimesByTask", new object[] {
                        user,
                        taskName}, this.GetLinkTimesByTaskOperationCompleted, userState);
        }
        
        private void OnGetLinkTimesByTaskOperationCompleted(object arg) {
            if ((this.GetLinkTimesByTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLinkTimesByTaskCompleted(this, new GetLinkTimesByTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://focussend.com/")]
    public partial class FocusUser {
        
        private string emailField;
        
        private string passwordField;
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://focussend.com/")]
    public partial class FocusLink {
        
        private string outerHtmlField;
        
        private string hrefField;
        
        private int allClickTimesField;
        
        private decimal allClickPercentField;
        
        private int mailClickTimesField;
        
        private decimal mailClickPercentField;
        
        /// <remarks/>
        public string OuterHtml {
            get {
                return this.outerHtmlField;
            }
            set {
                this.outerHtmlField = value;
            }
        }
        
        /// <remarks/>
        public string Href {
            get {
                return this.hrefField;
            }
            set {
                this.hrefField = value;
            }
        }
        
        /// <remarks/>
        public int AllClickTimes {
            get {
                return this.allClickTimesField;
            }
            set {
                this.allClickTimesField = value;
            }
        }
        
        /// <remarks/>
        public decimal AllClickPercent {
            get {
                return this.allClickPercentField;
            }
            set {
                this.allClickPercentField = value;
            }
        }
        
        /// <remarks/>
        public int MailClickTimes {
            get {
                return this.mailClickTimesField;
            }
            set {
                this.mailClickTimesField = value;
            }
        }
        
        /// <remarks/>
        public decimal MailClickPercent {
            get {
                return this.mailClickPercentField;
            }
            set {
                this.mailClickPercentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://focussend.com/")]
    public partial class FocusResult {
        
        private int resultField;
        
        private string descriptionField;
        
        /// <remarks/>
        public int Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://focussend.com/")]
    public partial class FocusReceiverAction {
        
        private int taskIdField;
        
        private string emailField;
        
        private string actionField;
        
        private string descriptionField;
        
        private string actionDateField;
        
        private string ipField;
        
        private string addressField;
        
        /// <remarks/>
        public int TaskId {
            get {
                return this.taskIdField;
            }
            set {
                this.taskIdField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string Action {
            get {
                return this.actionField;
            }
            set {
                this.actionField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string ActionDate {
            get {
                return this.actionDateField;
            }
            set {
                this.actionDateField = value;
            }
        }
        
        /// <remarks/>
        public string IP {
            get {
                return this.ipField;
            }
            set {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        public string Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://focussend.com/")]
    public partial class FocusReport {
        
        private string taskNameField;
        
        private string subjectField;
        
        private string senderNameField;
        
        private string senderEmailField;
        
        private string replyNameField;
        
        private string replyEmailField;
        
        private System.DateTime sendDateField;
        
        private System.DateTime finishDateField;
        
        private int totalField;
        
        private int sentField;
        
        private int hardBounceField;
        
        private int softBounceField;
        
        private int openCountField;
        
        private int uniqueOpenCountField;
        
        private int mailClickedField;
        
        private int linkClickedField;
        
        private int allClickedField;
        
        private int unsubscribeField;
        
        /// <remarks/>
        public string TaskName {
            get {
                return this.taskNameField;
            }
            set {
                this.taskNameField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public string SenderName {
            get {
                return this.senderNameField;
            }
            set {
                this.senderNameField = value;
            }
        }
        
        /// <remarks/>
        public string SenderEmail {
            get {
                return this.senderEmailField;
            }
            set {
                this.senderEmailField = value;
            }
        }
        
        /// <remarks/>
        public string ReplyName {
            get {
                return this.replyNameField;
            }
            set {
                this.replyNameField = value;
            }
        }
        
        /// <remarks/>
        public string ReplyEmail {
            get {
                return this.replyEmailField;
            }
            set {
                this.replyEmailField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime SendDate {
            get {
                return this.sendDateField;
            }
            set {
                this.sendDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime FinishDate {
            get {
                return this.finishDateField;
            }
            set {
                this.finishDateField = value;
            }
        }
        
        /// <remarks/>
        public int Total {
            get {
                return this.totalField;
            }
            set {
                this.totalField = value;
            }
        }
        
        /// <remarks/>
        public int Sent {
            get {
                return this.sentField;
            }
            set {
                this.sentField = value;
            }
        }
        
        /// <remarks/>
        public int HardBounce {
            get {
                return this.hardBounceField;
            }
            set {
                this.hardBounceField = value;
            }
        }
        
        /// <remarks/>
        public int SoftBounce {
            get {
                return this.softBounceField;
            }
            set {
                this.softBounceField = value;
            }
        }
        
        /// <remarks/>
        public int OpenCount {
            get {
                return this.openCountField;
            }
            set {
                this.openCountField = value;
            }
        }
        
        /// <remarks/>
        public int UniqueOpenCount {
            get {
                return this.uniqueOpenCountField;
            }
            set {
                this.uniqueOpenCountField = value;
            }
        }
        
        /// <remarks/>
        public int MailClicked {
            get {
                return this.mailClickedField;
            }
            set {
                this.mailClickedField = value;
            }
        }
        
        /// <remarks/>
        public int LinkClicked {
            get {
                return this.linkClickedField;
            }
            set {
                this.linkClickedField = value;
            }
        }
        
        /// <remarks/>
        public int AllClicked {
            get {
                return this.allClickedField;
            }
            set {
                this.allClickedField = value;
            }
        }
        
        /// <remarks/>
        public int Unsubscribe {
            get {
                return this.unsubscribeField;
            }
            set {
                this.unsubscribeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://focussend.com/")]
    public partial class FocusReceiver {
        
        private string emailField;
        
        private string fullNameField;
        
        private string companyField;
        
        private string cityField;
        
        private string phoneField;
        
        private string reserved1Field;
        
        private string reserved2Field;
        
        private string reserved3Field;
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public string Reserved1 {
            get {
                return this.reserved1Field;
            }
            set {
                this.reserved1Field = value;
            }
        }
        
        /// <remarks/>
        public string Reserved2 {
            get {
                return this.reserved2Field;
            }
            set {
                this.reserved2Field = value;
            }
        }
        
        /// <remarks/>
        public string Reserved3 {
            get {
                return this.reserved3Field;
            }
            set {
                this.reserved3Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://focussend.com/")]
    public partial class FocusTask {
        
        private string taskNameField;
        
        private string subjectField;
        
        private string senderNameField;
        
        private string senderEmailField;
        
        private string replyNameField;
        
        private string replyEmailField;
        
        private System.DateTime sendDateField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string TaskName {
            get {
                return this.taskNameField;
            }
            set {
                this.taskNameField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public string SenderName {
            get {
                return this.senderNameField;
            }
            set {
                this.senderNameField = value;
            }
        }
        
        /// <remarks/>
        public string SenderEmail {
            get {
                return this.senderEmailField;
            }
            set {
                this.senderEmailField = value;
            }
        }
        
        /// <remarks/>
        public string ReplyName {
            get {
                return this.replyNameField;
            }
            set {
                this.replyNameField = value;
            }
        }
        
        /// <remarks/>
        public string ReplyEmail {
            get {
                return this.replyEmailField;
            }
            set {
                this.replyEmailField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime SendDate {
            get {
                return this.sendDateField;
            }
            set {
                this.sendDateField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://focussend.com/")]
    public partial class FocusEmail {
        
        private string bodyField;
        
        private bool isBodyHtmlField;
        
        private string subjectField;
        
        /// <remarks/>
        public string Body {
            get {
                return this.bodyField;
            }
            set {
                this.bodyField = value;
            }
        }
        
        /// <remarks/>
        public bool IsBodyHtml {
            get {
                return this.isBodyHtmlField;
            }
            set {
                this.isBodyHtmlField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://focussend.com/")]
    public enum FocusReportType {
        
        /// <remarks/>
        SentSuccess,
        
        /// <remarks/>
        Open,
        
        /// <remarks/>
        Click,
        
        /// <remarks/>
        Unsubscribe,
        
        /// <remarks/>
        HardBounce,
        
        /// <remarks/>
        SoftBounce,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BatchSendCompletedEventHandler(object sender, BatchSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BatchSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BatchSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BatchSendWithAttachCompletedEventHandler(object sender, BatchSendWithAttachCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BatchSendWithAttachCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BatchSendWithAttachCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendGroupCompletedEventHandler(object sender, SendGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendOneCompletedEventHandler(object sender, SendOneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendOneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendOneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendOneWithSenderCompletedEventHandler(object sender, SendOneWithSenderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendOneWithSenderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendOneWithSenderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BatchSendPersonalCompletedEventHandler(object sender, BatchSendPersonalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BatchSendPersonalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BatchSendPersonalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetReportByNameCompletedEventHandler(object sender, GetReportByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FocusReport Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FocusReport)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetReceiverActionCompletedEventHandler(object sender, GetReceiverActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReceiverActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReceiverActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FocusReceiverAction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FocusReceiverAction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllReceiverActionCompletedEventHandler(object sender, GetAllReceiverActionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllReceiverActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllReceiverActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FocusReceiverAction[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FocusReceiverAction[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllReceiverActionByTypeCompletedEventHandler(object sender, GetAllReceiverActionByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllReceiverActionByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllReceiverActionByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FocusReceiverAction[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FocusReceiverAction[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddSubscribersToGroupCompletedEventHandler(object sender, AddSubscribersToGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubscribersToGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSubscribersToGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddSubUserCompletedEventHandler(object sender, AddSubUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSubUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FocusResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FocusResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddCreditToSubUserCompletedEventHandler(object sender, AddCreditToSubUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCreditToSubUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCreditToSubUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FocusResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FocusResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserLeftCreditCompletedEventHandler(object sender, GetUserLeftCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserLeftCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserLeftCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserReportUrlCompletedEventHandler(object sender, GetUserReportUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserReportUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserReportUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UploadTemplateCompletedEventHandler(object sender, UploadTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllReceiverActionByDescriptionAndTypeCompletedEventHandler(object sender, GetAllReceiverActionByDescriptionAndTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllReceiverActionByDescriptionAndTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllReceiverActionByDescriptionAndTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FocusReceiverAction[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FocusReceiverAction[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllReceiverActionByDescriptionCompletedEventHandler(object sender, GetAllReceiverActionByDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllReceiverActionByDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllReceiverActionByDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FocusReceiverAction[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FocusReceiverAction[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetReportByDescriptionCompletedEventHandler(object sender, GetReportByDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportByDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportByDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FocusReport Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FocusReport)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLinkTimesByTaskCompletedEventHandler(object sender, GetLinkTimesByTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLinkTimesByTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLinkTimesByTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FocusLink[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FocusLink[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591